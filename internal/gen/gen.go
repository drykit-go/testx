package gen

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"

	"github.com/drykit-go/strcase"
)

var tplFuncs = template.FuncMap{
	"camelcase": strcase.Camel,
}

func Types(tpl, out string) error {
	s, err := readTplFile(tpl)
	if err != nil {
		return err
	}

	t, err := template.New("types").Funcs(tplFuncs).Parse(s)
	if err != nil {
		return err
	}

	f, err := createOutFile(out)
	if err != nil {
		return err
	}

	if err := t.Execute(f, types); err != nil {
		return err
	}

	return runFormatter(out)
}

func Interfaces(tpl, out string) error {
	s, err := readTplFile(tpl)
	if err != nil {
		return err
	}

	t, err := template.New(tpl).Parse(s)
	if err != nil {
		return err
	}

	f, err := createOutFile(out)
	if err != nil {
		return err
	}

	data, err := computeInterfaces()
	if err != nil {
		return err
	}

	if err := t.Execute(f, data); err != nil {
		return err
	}

	return runFormatter(out)
}

func readTplFile(filepath string) (string, error) {
	b, err := os.ReadFile(filepath)
	if err != nil {
		return "", fmt.Errorf("failed to read template file %s: %w", filepath, err)
	}
	return string(b), nil
}

func createOutFile(filepath string) (*os.File, error) {
	f, err := os.Create(filepath)
	if err != nil {
		return nil, err
	}
	if _, err := f.WriteString(generateHeader()); err != nil {
		return nil, err
	}
	return f, nil
}

func generateHeader() string {
	s := strings.Builder{}
	s.WriteString("// Code generated by go generate ./...; DO NOT EDIT\n")
	s.WriteString(fmt.Sprintf(
		"// Last generated on %s\n\n",
		time.Now().UTC().Format(time.RFC822),
	))
	return s.String()
}

func runFormatter(filepath string) error {
	cmd := exec.Command("goimports", "-w", filepath)
	return cmd.Run()
}

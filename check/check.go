// Code generated by go generate ./...; DO NOT EDIT
// Last generated on 27 Aug 21 03:32 UTC

// Package check provides types to perform checks on values
// in a testing context.
package check

import (
	"net/http"
	"time"
)

type (
	// BytesPassFunc is the required method to implement BytesPasser.
	// It returns a boolean that indicates whether the gotten []byte value
	// passes the current check.
	BytesPassFunc func(got []byte) bool
	// StringPassFunc is the required method to implement StringPasser.
	// It returns a boolean that indicates whether the gotten string value
	// passes the current check.
	StringPassFunc func(got string) bool
	// IntPassFunc is the required method to implement IntPasser.
	// It returns a boolean that indicates whether the gotten int value
	// passes the current check.
	IntPassFunc func(got int) bool
	// DurationPassFunc is the required method to implement DurationPasser.
	// It returns a boolean that indicates whether the gotten time.Duration value
	// passes the current check.
	DurationPassFunc func(got time.Duration) bool
	// HTTPHeaderPassFunc is the required method to implement HTTPHeaderPasser.
	// It returns a boolean that indicates whether the gotten http.Header value
	// passes the current check.
	HTTPHeaderPassFunc func(got http.Header) bool
	// UntypedPassFunc is the required method to implement UntypedPasser.
	// It returns a boolean that indicates whether the gotten interface{} value
	// passes the current check.
	UntypedPassFunc func(got interface{}) bool

	// ExplainFunc is the required method to implement Explainer.
	// It returns a string explaining why the gotten value failed the check.
	// The label provides some context, such as "response code".
	ExplainFunc func(label string, got interface{}) string
)

type (
	// BytesPasser provides a method Pass that returns a bool that indicates
	// whether the gotten []byte value passes the current check.
	BytesPasser interface{ Pass(got []byte) bool }
	// StringPasser provides a method Pass that returns a bool that indicates
	// whether the gotten string value passes the current check.
	StringPasser interface{ Pass(got string) bool }
	// IntPasser provides a method Pass that returns a bool that indicates
	// whether the gotten int value passes the current check.
	IntPasser interface{ Pass(got int) bool }
	// DurationPasser provides a method Pass that returns a bool that indicates
	// whether the gotten time.Duration value passes the current check.
	DurationPasser interface{ Pass(got time.Duration) bool }
	// HTTPHeaderPasser provides a method Pass that returns a bool that indicates
	// whether the gotten http.Header value passes the current check.
	HTTPHeaderPasser interface{ Pass(got http.Header) bool }
	// UntypedPasser provides a method Pass that returns a bool that indicates
	// whether the gotten interface{} value passes the current check.
	UntypedPasser interface{ Pass(got interface{}) bool }

	// Explainer provides a method Explain describing the reason of a failed check.
	Explainer interface {
		Explain(label string, got interface{}) string
	}
)

type (
	// BytesChecker implements both BytesPasser and Explainer interfaces.
	BytesChecker interface {
		BytesPasser
		Explainer
	}
	// StringChecker implements both StringPasser and Explainer interfaces.
	StringChecker interface {
		StringPasser
		Explainer
	}
	// IntChecker implements both IntPasser and Explainer interfaces.
	IntChecker interface {
		IntPasser
		Explainer
	}
	// DurationChecker implements both DurationPasser and Explainer interfaces.
	DurationChecker interface {
		DurationPasser
		Explainer
	}
	// HTTPHeaderChecker implements both HTTPHeaderPasser and Explainer interfaces.
	HTTPHeaderChecker interface {
		HTTPHeaderPasser
		Explainer
	}
	// UntypedChecker implements both UntypedPasser and Explainer interfaces.
	UntypedChecker interface {
		UntypedPasser
		Explainer
	}
)

// bytesChecker is an implementation of BytesChecker interface
type bytesChecker struct {
	passFunc BytesPassFunc
	explFunc ExplainFunc
}

// Pass returns a boolean that indicates whether the gotten []byte value
// passes the current check.
func (c bytesChecker) Pass(got []byte) bool { return c.passFunc(got) }

// Explain explains the reason of a failed check for the gotten value.
func (c bytesChecker) Explain(label string, got interface{}) string { return c.explFunc(label, got) }

// NewBytesChecker returns a custom BytesChecker with the provided BytesPassFunc
// and ExplainFunc.
func NewBytesChecker(passFunc BytesPassFunc, explainFunc ExplainFunc) BytesChecker {
	return bytesChecker{passFunc: passFunc, explFunc: explainFunc}
}

// stringChecker is an implementation of StringChecker interface
type stringChecker struct {
	passFunc StringPassFunc
	explFunc ExplainFunc
}

// Pass returns a boolean that indicates whether the gotten string value
// passes the current check.
func (c stringChecker) Pass(got string) bool { return c.passFunc(got) }

// Explain explains the reason of a failed check for the gotten value.
func (c stringChecker) Explain(label string, got interface{}) string { return c.explFunc(label, got) }

// NewStringChecker returns a custom StringChecker with the provided StringPassFunc
// and ExplainFunc.
func NewStringChecker(passFunc StringPassFunc, explainFunc ExplainFunc) StringChecker {
	return stringChecker{passFunc: passFunc, explFunc: explainFunc}
}

// intChecker is an implementation of IntChecker interface
type intChecker struct {
	passFunc IntPassFunc
	explFunc ExplainFunc
}

// Pass returns a boolean that indicates whether the gotten int value
// passes the current check.
func (c intChecker) Pass(got int) bool { return c.passFunc(got) }

// Explain explains the reason of a failed check for the gotten value.
func (c intChecker) Explain(label string, got interface{}) string { return c.explFunc(label, got) }

// NewIntChecker returns a custom IntChecker with the provided IntPassFunc
// and ExplainFunc.
func NewIntChecker(passFunc IntPassFunc, explainFunc ExplainFunc) IntChecker {
	return intChecker{passFunc: passFunc, explFunc: explainFunc}
}

// durationChecker is an implementation of DurationChecker interface
type durationChecker struct {
	passFunc DurationPassFunc
	explFunc ExplainFunc
}

// Pass returns a boolean that indicates whether the gotten time.Duration value
// passes the current check.
func (c durationChecker) Pass(got time.Duration) bool { return c.passFunc(got) }

// Explain explains the reason of a failed check for the gotten value.
func (c durationChecker) Explain(label string, got interface{}) string { return c.explFunc(label, got) }

// NewDurationChecker returns a custom DurationChecker with the provided DurationPassFunc
// and ExplainFunc.
func NewDurationChecker(passFunc DurationPassFunc, explainFunc ExplainFunc) DurationChecker {
	return durationChecker{passFunc: passFunc, explFunc: explainFunc}
}

// httpHeaderChecker is an implementation of HTTPHeaderChecker interface
type httpHeaderChecker struct {
	passFunc HTTPHeaderPassFunc
	explFunc ExplainFunc
}

// Pass returns a boolean that indicates whether the gotten http.Header value
// passes the current check.
func (c httpHeaderChecker) Pass(got http.Header) bool { return c.passFunc(got) }

// Explain explains the reason of a failed check for the gotten value.
func (c httpHeaderChecker) Explain(label string, got interface{}) string {
	return c.explFunc(label, got)
}

// NewHTTPHeaderChecker returns a custom HTTPHeaderChecker with the provided HTTPHeaderPassFunc
// and ExplainFunc.
func NewHTTPHeaderChecker(passFunc HTTPHeaderPassFunc, explainFunc ExplainFunc) HTTPHeaderChecker {
	return httpHeaderChecker{passFunc: passFunc, explFunc: explainFunc}
}

// untypedChecker is an implementation of UntypedChecker interface
type untypedChecker struct {
	passFunc UntypedPassFunc
	explFunc ExplainFunc
}

// Pass returns a boolean that indicates whether the gotten interface{} value
// passes the current check.
func (c untypedChecker) Pass(got interface{}) bool { return c.passFunc(got) }

// Explain explains the reason of a failed check for the gotten value.
func (c untypedChecker) Explain(label string, got interface{}) string { return c.explFunc(label, got) }

// NewUntypedChecker returns a custom UntypedChecker with the provided UntypedPassFunc
// and ExplainFunc.
func NewUntypedChecker(passFunc UntypedPassFunc, explainFunc ExplainFunc) UntypedChecker {
	return untypedChecker{passFunc: passFunc, explFunc: explainFunc}
}

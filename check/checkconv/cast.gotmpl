// Package checkconv provides functions to convert typed checks
// into generic untyped ones.
package checkconv

{{range . -}}
{{if ne .N "Untyped" }}
// From{{.N}} returns a new check.UntypedChecker from the given {{.N}} checker.
// It can be used to facilitate checkers usage by test runners.
func From{{.N}}(c check.{{.N}}Checker) check.UntypedChecker {
	return check.NewUntypedCheck(
		func(got interface{}) bool { return c.Pass(got.({{.T}})) },
		c.Explain,
	)
}
{{end}}
{{end}}

// Cast takes a known typed checker (such as check.IntChecker)
// and returns its as a check.UntypedChecker.
// It can be used to facilitate checkers usage by test runners.
// It panics if checker is not a known checker type. For instance,
// a custom checker that implements check.IntChecker will be successfully
// converted, while a valid implementation of an unknown interface,
// such as Float64Checker, will panic.
// For that matter, Assert can be used instead.
func Cast(knownChecker interface{}) check.UntypedChecker {
	switch c := knownChecker.(type) {
	{{range . -}}
	{{if ne .N "Untyped" -}}
	case check.{{.N}}Checker:
		return From{{.N}}(c)
	{{end -}}
	{{end -}}
	case check.UntypedChecker:
		return c
	default:
		log.Panic("attempt to convert unknown checker type")
		return nil
	}
}

// Code generated by go generate ./...; DO NOT EDIT
// Last generated on 10 Aug 21 13:46 UTC

// Package checkconv provides functions to convert typed checks
// into generic untyped ones.
package checkconv

import (
	"log"
	"net/http"
	"time"

	"github.com/drykit-go/testx/check"
)

func FromBytes(c check.BytesChecker) check.UntypedChecker {
	return check.NewUntypedCheck(
		func(got interface{}) bool { return c.Pass(got.([]byte)) },
		c.Explain,
	)
}

func FromString(c check.StringChecker) check.UntypedChecker {
	return check.NewUntypedCheck(
		func(got interface{}) bool { return c.Pass(got.(string)) },
		c.Explain,
	)
}

func FromInt(c check.IntChecker) check.UntypedChecker {
	return check.NewUntypedCheck(
		func(got interface{}) bool { return c.Pass(got.(int)) },
		c.Explain,
	)
}

func FromDuration(c check.DurationChecker) check.UntypedChecker {
	return check.NewUntypedCheck(
		func(got interface{}) bool { return c.Pass(got.(time.Duration)) },
		c.Explain,
	)
}

func FromHTTPHeader(c check.HTTPHeaderChecker) check.UntypedChecker {
	return check.NewUntypedCheck(
		func(got interface{}) bool { return c.Pass(got.(http.Header)) },
		c.Explain,
	)
}

// UntypedChecker takes a typed checker parameter (such as check.IntChecker)
// and returns its untyped version.
// It can be used to facilitate checkers usage by test runners.
func UntypedChecker(checker interface{}) check.UntypedChecker {
	switch c := checker.(type) {
	case check.BytesChecker:
		return FromBytes(c)
	case check.StringChecker:
		return FromString(c)
	case check.IntChecker:
		return FromInt(c)
	case check.DurationChecker:
		return FromDuration(c)
	case check.HTTPHeaderChecker:
		return FromHTTPHeader(c)
	case check.UntypedChecker:
		return c
	default:
		log.Fatal("bad conversion")
		return nil
	}
}

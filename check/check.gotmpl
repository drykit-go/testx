// Package check provides types to perform checks on values
// in a testing context.
package check

type (
	{{range . -}}
	// {{.N}}PassFunc is the required method to implement {{.N}}Passer.
	// It returns a boolean that indicates whether the gotten {{.T}} value
	// passes the current check.
	{{.N}}PassFunc func(got {{.T}}) bool
	{{end}}

	// ExplainFunc is the required method to implement Explainer.
	// It returns a string explaining why the gotten value failed the check.
	// The label provides some context, such as "response code".
	ExplainFunc func(label string, got interface{}) string
)

type (
	{{range . -}}
	// {{.N}}Passer provides a method Pass that returns a bool that indicates
	// whether the gotten {{.T}} value passes the current check.
	{{.N}}Passer interface { Pass(got {{.T}}) bool }
	{{end}}

	// Explainer provides a method Explain describing the reason of a failed check.
	Explainer interface { Explain(label string, got interface{}) string }
)

type (
	{{range . -}}
	// {{.N}}Checker implements both {{.N}}Passer and Explainer interfaces.
	{{.N}}Checker interface {
		{{.N}}Passer
		Explainer
	}
	{{end}}
)

{{range . -}}
// {{camelcase .N}}Check is an implementation of {{.N}}Checker interface
type {{camelcase .N}}Check struct {
	passFunc {{.N}}PassFunc
	explFunc ExplainFunc
}

// Pass returns a boolean that indicates whether the gotten {{.T}} value
// passes the current check.
func (c {{camelcase .N}}Check) Pass(got {{.T}}) bool { return c.passFunc(got) }

// Explain explains the reason of a failed check for the gotten value.
func (c {{camelcase .N}}Check) Explain(label string, got interface{}) string { return c.explFunc(label, got) }

// New{{.N}}Check returns a custom {{.N}}Checker with the provided {{.N}}PassFunc
// and ExplainFunc.
func New{{.N}}Check(passFunc {{.N}}PassFunc, explainFunc ExplainFunc) {{.N}}Checker {
	return {{camelcase .N}}Check{passFunc: passFunc, explFunc: explainFunc}
}
{{end}}

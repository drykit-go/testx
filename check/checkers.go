// Code generated by go generate ./...; DO NOT EDIT
// Last generated on 29 Aug 21 13:09 UTC

package check

import (
	"net/http"
	"time"
)

type baseChecker struct {
	explFunc ExplainFunc
}

// Explain returns a string explaining the reason of a failed check
// for the gotten value.
func (c baseChecker) Explain(label string, got interface{}) string {
	return c.explFunc(label, got)
}

func newBaseChecker(explFunc ExplainFunc) baseChecker {
	return baseChecker{explFunc: explFunc}
}

// bytesChecker is an implementation of BytesChecker interface
type bytesChecker struct {
	baseChecker
	passFunc BytesPassFunc
}

// Pass returns a boolean that indicates whether the gotten []byte value
// passes the current check.
func (c bytesChecker) Pass(got []byte) bool { return c.passFunc(got) }

// NewBytesChecker returns a custom BytesChecker with the provided
// BytesPassFunc and ExplainFunc.
func NewBytesChecker(passFunc BytesPassFunc, explainFunc ExplainFunc) BytesChecker {
	return bytesChecker{passFunc: passFunc, baseChecker: newBaseChecker(explainFunc)}
}

// stringChecker is an implementation of StringChecker interface
type stringChecker struct {
	baseChecker
	passFunc StringPassFunc
}

// Pass returns a boolean that indicates whether the gotten string value
// passes the current check.
func (c stringChecker) Pass(got string) bool { return c.passFunc(got) }

// NewStringChecker returns a custom StringChecker with the provided
// StringPassFunc and ExplainFunc.
func NewStringChecker(passFunc StringPassFunc, explainFunc ExplainFunc) StringChecker {
	return stringChecker{passFunc: passFunc, baseChecker: newBaseChecker(explainFunc)}
}

// intChecker is an implementation of IntChecker interface
type intChecker struct {
	baseChecker
	passFunc IntPassFunc
}

// Pass returns a boolean that indicates whether the gotten int value
// passes the current check.
func (c intChecker) Pass(got int) bool { return c.passFunc(got) }

// NewIntChecker returns a custom IntChecker with the provided
// IntPassFunc and ExplainFunc.
func NewIntChecker(passFunc IntPassFunc, explainFunc ExplainFunc) IntChecker {
	return intChecker{passFunc: passFunc, baseChecker: newBaseChecker(explainFunc)}
}

// durationChecker is an implementation of DurationChecker interface
type durationChecker struct {
	baseChecker
	passFunc DurationPassFunc
}

// Pass returns a boolean that indicates whether the gotten time.Duration value
// passes the current check.
func (c durationChecker) Pass(got time.Duration) bool { return c.passFunc(got) }

// NewDurationChecker returns a custom DurationChecker with the provided
// DurationPassFunc and ExplainFunc.
func NewDurationChecker(passFunc DurationPassFunc, explainFunc ExplainFunc) DurationChecker {
	return durationChecker{passFunc: passFunc, baseChecker: newBaseChecker(explainFunc)}
}

// httpHeaderChecker is an implementation of HTTPHeaderChecker interface
type httpHeaderChecker struct {
	baseChecker
	passFunc HTTPHeaderPassFunc
}

// Pass returns a boolean that indicates whether the gotten http.Header value
// passes the current check.
func (c httpHeaderChecker) Pass(got http.Header) bool { return c.passFunc(got) }

// NewHTTPHeaderChecker returns a custom HTTPHeaderChecker with the provided
// HTTPHeaderPassFunc and ExplainFunc.
func NewHTTPHeaderChecker(passFunc HTTPHeaderPassFunc, explainFunc ExplainFunc) HTTPHeaderChecker {
	return httpHeaderChecker{passFunc: passFunc, baseChecker: newBaseChecker(explainFunc)}
}

// valueChecker is an implementation of ValueChecker interface
type valueChecker struct {
	baseChecker
	passFunc ValuePassFunc
}

// Pass returns a boolean that indicates whether the gotten interface{} value
// passes the current check.
func (c valueChecker) Pass(got interface{}) bool { return c.passFunc(got) }

// NewValueChecker returns a custom ValueChecker with the provided
// ValuePassFunc and ExplainFunc.
func NewValueChecker(passFunc ValuePassFunc, explainFunc ExplainFunc) ValueChecker {
	return valueChecker{passFunc: passFunc, baseChecker: newBaseChecker(explainFunc)}
}
